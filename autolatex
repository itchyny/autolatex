#!/bin/sh
# Filename: autolatex
# Author: itchyny
# License: MIT License
# Last Change: 2014/05/24 14:50:32.

# Usage: autolatex test.tex
if [ $# -ne 1 ]; then
  echo 'no argument'
  exit 1
fi

# Source file
source=$(basename -- "$1")
dirname=$(dirname -- "$1")

# Change the working directory
cd "$dirname"

# You can omit the file extension
if ! [ -f "$source" ] && [ "$source" = "${source%.*}" ]; then
  source=$source.tex
  if ! [ -f "$source" ]; then
    echo "$source not found"
    exit 1
  fi
fi
source="./"$source

# Temporary file
filename=${source%.*}
if [ "$filename" = "" ]; then
  filename=$source
fi
specified=0
# If you write a comment "% filename test", it reads that line and set as the filename.
if grep '^% *filename  *[[:alnum:]]' "$source" > /dev/null; then
  filename="./"$(grep '^% *filename ' "$source" | sed 's/^% *filename *//g;s/ *$//g' | tr -d '\r\n')
  outputpdf=$filename.pdf
  specified=1
fi
filename=$(echo "$filename" | sed 's/ *\././g' | sed 's/ *$//g')
if [ "$filename" = "./" ]; then
  filename="./_"
fi
texfile=$filename.tex
while [ -e "$texfile" ] && [ "$(head -n 1 "$texfile")" != "%%%%%autolatex%%%%%" ] ; do
  texfile=$texfile"_"
done
if [ $specified = 0 ]; then
  outputpdf=$filename.pdf
fi

# BibTeX
# You can use jbibtex if you wish with a comment: % jbibtex
if command -v jbibtex > /dev/null 2>&1 && grep '^% *jbibtex *$' "$source" > /dev/null; then
  bibtex=jbibtex
else
  bibtex=bibtex
fi
if ls ./*.bib > /dev/null 2>&1 && [ -f "$filename.aux" ]; then
  if grep '\\bibliography' "$source" > /dev/null; then
    $bibtex "$filename.aux"
    if [ -f "$filename.aux.bbl" ]; then
      sed -i.bak -e '/%$/N;s/%\n//' "$filename.aux.bbl"
      mv -f "$filename.aux.bbl" "$filename.bbl"
    else
      sed -i.bak -e '/%$/N;s/%\n//' "$filename.bbl"
    fi
  fi
fi

# Borrow document class from existing files in the directory
if cat ./*.tex 2> /dev/null | grep '^\\documentclass' > /dev/null; then
  documentclass=$(cat ./*.tex | grep '^\\documentclass' | head -n 1)
else
  documentclass='\documentclass[a4paper,11pt]{article}'
fi

# If there is \bye command, use tex instead of platex
usepdflatex=0
if grep '^% *pdflatex' "$source" > /dev/null; then
  uselatex=1
  usepdflatex=1
  tex=pdflatex
elif grep '\\bye' "$source" > /dev/null; then
  uselatex=0
  tex=tex
elif grep '{\(abc\)}' "$source" > /dev/null; then
  uselatex=1
  usepdflatex=1
  tex=pdflatex
elif grep '{\(article\|revtex\)}' "$source" > /dev/null; then
  uselatex=1
  tex=latex
else
  uselatex=1
  tex=platex
fi

# If xy-pic is used, we have to compile through postscript
if grep '^% *nops' "$source" > /dev/null; then
  useps=0
elif grep '\({xy}\|Qcircuit\|^% *useps\)' "$source" > /dev/null; then
  useps=1
else
  useps=0
fi

# Check if the argument file is a piece of a document.
echo '%%%%%autolatex%%%%%' > "$texfile"
if [ $uselatex -eq 1 ] && ! grep 'documentclass' "$source" > /dev/null; then
  echo " $documentclass" >> "$texfile"
  mainfile=0
  for file in *.tex
  do
    if test -f "$file" && grep -- '^\\documentclass' "$file" > /dev/null; then
      mainfile=1
      break;
    fi
  done
  if [ $mainfile -eq 1 ]; then
    cat -- "$file" | LC_ALL=C sed 's/^\\documentclass/% \\documentclass/' |\
      LC_ALL=C sed '/\\begin{document}/,$d' >> "$texfile"
  else
    if grep '{\(align\|cases\)' "$source" > /dev/null; then
      echo '\\usepackage{amssymb,amsmath}' >> "$texfile"
    fi
    if grep '\\bm' "$source" > /dev/null; then
      echo '\\usepackage{bm}' >> "$texfile"
    fi
    if grep '\\includegraphics' "$source" > /dev/null; then
      echo '\\usepackage[dvipdfm]{graphicx}' >> "$texfile"
    fi
  fi
  echo '\\begin{document}' >> "$texfile"
  enddocument='\end{document}'
else
  enddocument=''
fi

# Check options (example: % dvipdfmx -f dlbase14.map)
if grep '^% *dvipdfmx ' "$source" > /dev/null; then
  dvipdfmx_opt=$(grep '^% *dvipdfmx ' "$source" | sed 's/^% *dvipdfmx//' | tr -d '\r')
else
  dvipdfmx_opt=''
fi
tex_opt=''
if grep '^% *\(p\(df\)\?la\)\?tex ' "$source" > /dev/null; then
  tex_opt=$(grep '^% *\(p\(df\)\?la\)\?tex ' "$source" | sed 's/^% *\(p\(df\)*la\)*tex//' | tr -d '\r')
elif grep '{\(abc\)}' "$source" > /dev/null; then
  tex_opt='--shell-escape'
fi

# Pdf viewer
if [ "$(uname)" = 'Darwin' ]; then
  pdfviewer="open -a Preview"
elif command -v gnome-open > /dev/null 2>&1; then
  pdfviewer="gnome-open"
elif command -v xdg-open > /dev/null 2>&1; then
  pdfviewer="xdg-open"
elif command -v exo-open > /dev/null 2>&1; then
  pdfviewer="exo-open"
elif command -v evince > /dev/null 2>&1; then
  pdfviewer="evince"
elif command -v gpdf > /dev/null 2>&1; then
  pdfviewer="gpdf"
elif command -v kpdf > /dev/null 2>&1; then
  pdfviewer="kpdf"
else
  pdfviewer=""
fi

# Check if platex supports utf8
if platex -v | head -n 1 | grep "(utf8" > /dev/null; then
  utf8=1
else
  utf8=0
fi

# Check the encoding of the source file
if [ "$(uname)" = "Darwin" ]; then
  encoding="file --mime"
else
  encoding="file -bi"
fi
if $encoding "$source" | grep "utf-8\|us-ascii" > /dev/null; then
  sourceutf8=1
else
  sourceutf8=0
fi

# TeX process
if [ $useps -eq 1 ]; then
  texprocess="$tex $tex_opt \"$texfile\" && dvips \"$filename.dvi\" && ps2pdf \"$filename.ps\""
elif [ $usepdflatex -eq 1 ]; then
  texprocess="$tex $tex_opt \"$texfile\""
else
  texprocess="$tex $tex_opt \"$texfile\" && dvipdfmx $dvipdfmx_opt \"$filename.dvi\""
fi

# Create the tex file
if [ $utf8 -eq 1 ] && [ $sourceutf8 -eq 1 ]; then
  sed 's/^\(\\documentclass\)/ \1/' "$source" >> "$texfile"
  echo "$enddocument" >> "$texfile"
else
  # nkf -e "$source" >> ."$texfile"
  IFS='
'
  if platex -v | head -n 1 | grep "(utf8" > /dev/null; then
    nkfopt=-w
  elif platex -v | head -n 1 | grep "(sjis" > /dev/null; then
    nkfopt=-s
  else
    nkfopt=-e
  fi
  (cat -- "$source"; echo) | LC_ALL=C sed 's/\\/\\\\/g' | while read -r line; do
    if echo "$line" | grep '^\\input ' > /dev/null; then
      inputfilename=$(echo "$line" | LC_ALL=C sed 's/\\input *//')
      (cat -- "$inputfilename"; echo) | LC_ALL=C sed 's/\\/\\\\/g' | while read -r linee; do
        if echo "$linee" | grep '^\\input ' > /dev/null; then
          inputfilename=$(echo "$linee" | LC_ALL=C sed 's/\\input *//')
          cat -- "$inputfilename" | nkf $nkfopt >> "$texfile"
        else
          echo "$linee" | nkf $nkfopt >> "$texfile"
        fi
      done
    else
      echo "$line" | nkf $nkfopt >> "$texfile"
    fi
  done
  echo "$enddocument" >> "$texfile"
fi

# Main process
if eval "$texprocess"; then
  if [ "$filename.pdf" != "$outputpdf" ]; then
    mv -f "$filename.pdf" "$outputpdf"
  fi
  if [ "$pdfviewer" != "" ]; then
    eval "$pdfviewer \"$outputpdf\"" &
  fi
fi

# Post process
rm -f "$texfile" "$filename.log" "$filename.dvi" "$filename.blg" "$filename.aux.blg" "$filename.bbl.bak" "$filename.aux.bbl.bak"
# If you write a comment "% rm aux toc", read that line and remove files.
if grep '^% *rm ' "$source" > /dev/null; then
  files=$(grep '^% *rm ' "$source" |\
    sed 's/^% *rm//' |\
    sed "s/\([ ,]\)\([^ ,][^ ,]*\)/ \"$(echo "$filename" | sed 's/\//\\\//g').\2\"/g" |\
    tr '\r,' ' ' )
  eval "rm -f $files"
fi
